<footer class="footer">
    <div class="container-fluid">
        <div class="row text-muted">
            <div class="col-6 text-start">
              
                <p class="mb-0">
                    <img src="images/cow-circle.S5_Ojsw4_Z2a0x7O.svg" style="width:5%;">
                    <a class="text-muted" href="#" target="_blank"><strong>BTFDCOIN</strong></a> 
                   
                </p>
            </div>
           
        </div>
    </div>

</footer>
</div>
</div>


<script src="js/app.js"></script>
<script src="js/btc_trade_view.js"></script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
   
    <script src="js/ethereum_crypto.js"></script>
    <script src="js/usdt_crypto.js"></script>
    <script src="js/crypto_doge.js"></script>
    <script src="js/add_money_account.js"></script>
    <script src="js/copy.js"></script>
    <script src="js/transaction_history.js"></script>
    <script src="js/convertToBtc.js"></script>
    <script src="js/update_user_profile.js"></script>
    <script src="js/changepassword.js"></script>
    <script src="js/check_profile_update.js"></script>
    <script src="js/investmentPlans.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
   
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById("chartjs-dashboard-line").getContext("2d");
        var gradient = ctx.createLinearGradient(0, 0, 0, 225);
        gradient.addColorStop(0, "rgba(215, 227, 244, 1)");
        gradient.addColorStop(1, "rgba(215, 227, 244, 0)");
        // Line chart
        new Chart(document.getElementById("chartjs-dashboard-line"), {
            type: "line",
            data: {
                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: "Sales ($)",
                    fill: true,
                    backgroundColor: gradient,
                    borderColor: window.theme.primary,
                    data: [
                        2115,
                        1562,
                        1584,
                        1892,
                        1587,
                        1923,
                        2566,
                        2448,
                        2805,
                        3438,
                        2917,
                        3327
                    ]
                }]
            },
            options: {
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                tooltips: {
                    intersect: false
                },
                hover: {
                    intersect: true
                },
                plugins: {
                    filler: {
                        propagate: false
                    }
                },
                scales: {
                    xAxes: [{
                        reverse: true,
                        gridLines: {
                            color: "rgba(0,0,0,0.0)"
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            stepSize: 1000
                        },
                        display: true,
                        borderDash: [3, 3],
                        gridLines: {
                            color: "rgba(0,0,0,0.0)"
                        }
                    }]
                }
            }
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Pie chart
        new Chart(document.getElementById("chartjs-dashboard-pie"), {
            type: "pie",
            data: {
                labels: ["Chrome", "Firefox", "IE"],
                datasets: [{
                    data: [4306, 3801, 1689],
                    backgroundColor: [
                        window.theme.primary,
                        window.theme.warning,
                        window.theme.danger
                    ],
                    borderWidth: 5
                }]
            },
            options: {
                responsive: !window.MSInputMethodContext,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                cutoutPercentage: 75
            }
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Bar chart
        new Chart(document.getElementById("chartjs-dashboard-bar"), {
            type: "bar",
            data: {
                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: "This year",
                    backgroundColor: window.theme.primary,
                    borderColor: window.theme.primary,
                    hoverBackgroundColor: window.theme.primary,
                    hoverBorderColor: window.theme.primary,
                    data: [54, 67, 41, 55, 62, 45, 55, 73, 60, 76, 48, 79],
                    barPercentage: .75,
                    categoryPercentage: .5
                }]
            },
            options: {
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                scales: {
                    yAxes: [{
                        gridLines: {
                            display: false
                        },
                        stacked: false,
                        ticks: {
                            stepSize: 20
                        }
                    }],
                    xAxes: [{
                        stacked: false,
                        gridLines: {
                            color: "transparent"
                        }
                    }]
                }
            }
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var markers = [{
            coords: [31.230391, 121.473701],
            name: "Shanghai"
        },
        {
            coords: [28.704060, 77.102493],
            name: "Delhi"
        },
        {
            coords: [6.524379, 3.379206],
            name: "Lagos"
        },
        {
            coords: [35.689487, 139.691711],
            name: "Tokyo"
        },
        {
            coords: [23.129110, 113.264381],
            name: "Guangzhou"
        },
        {
            coords: [40.7127837, -74.0059413],
            name: "New York"
        },
        {
            coords: [34.052235, -118.243683],
            name: "Los Angeles"
        },
        {
            coords: [41.878113, -87.629799],
            name: "Chicago"
        },
        {
            coords: [51.507351, -0.127758],
            name: "London"
        },
        {
            coords: [40.416775, -3.703790],
            name: "Madrid "
        }
        ];
        var map = new jsVectorMap({
            map: "world",
            selector: "#world_map",
            zoomButtons: true,
            markers: markers,
            markerStyle: {
                initial: {
                    r: 9,
                    strokeWidth: 7,
                    stokeOpacity: .4,
                    fill: window.theme.primary
                },
                hover: {
                    fill: window.theme.primary,
                    stroke: window.theme.primary
                }
            },
            zoomOnScroll: false
        });
        window.addEventListener("resize", () => {
            map.updateSize();
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var date = new Date(Date.now() - 5 * 24 * 60 * 60 * 1000);
        var defaultDate = date.getUTCFullYear() + "-" + (date.getUTCMonth() + 1) + "-" + date.getUTCDate();
        document.getElementById("datetimepicker-dashboard").flatpickr({
            inline: true,
            prevArrow: "<span title=\"Previous month\">&laquo;</span>",
            nextArrow: "<span title=\"Next month\">&raquo;</span>",
            defaultDate: defaultDate
        });
    });
</script>

<script>
    async function fetchCryptoPrices() {
        try {
            const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,dogecoin&order=market_cap_desc&per_page=3&page=1&sparkline=false&price_change_percentage=24h');
            const data = await response.json();

            console.log("API Response:", data); // Debugging: Check API response in console

            // Format price with commas
            const formatPrice = (price) => price.toLocaleString("en-US", { minimumFractionDigits: 2 });

            // Function to format percentage change
            const formatChange = (change) => {
                if (change === undefined) return "N/A"; // Handle missing data
                const percentage = change.toFixed(2); // Keep 2 decimal places
                return percentage > 0
                    ? `<span class="green">+${percentage}%</span>`
                    : `<span class="red">${percentage}%</span>`;
            };

            // Extract data properly
            const bitcoin = data.find(coin => coin.id === "bitcoin");
            const ethereum = data.find(coin => coin.id === "ethereum");
            const dogecoin = data.find(coin => coin.id === "dogecoin");
            const tether = data.find(coin => coin.id === "tether");
            const binancecoin = data.find(coin => coin.id === "binancecoin");
            // let display_BNB = `$${formatPrice(binancecoin.current_price)}`;
            let display_bitcoin = `$${formatPrice(bitcoin.current_price)}`;
            let display_ethereum = `$${formatPrice(ethereum.current_price)}`;
            let display_doge = `$${formatPrice(dogecoin.current_price)}`;
            //let display_usdt =`$${formatPrice(tether.current_price)}`;

            let fbitcoin = `${formatChange(bitcoin.price_change_percentage_24h)}`;
            let feth = `${formatChange(ethereum.price_change_percentage_24h)}`
            let fdoge = `${formatChange(dogecoin.price_change_percentage_24h)}`

            // Update the HTML
            document.getElementById('bitcoin').innerHTML = display_bitcoin;
            document.getElementById('changebtc').innerHTML = fbitcoin;
            document.getElementById('eth').innerHTML = display_ethereum;
            document.getElementById('ethchange').innerHTML = feth;
            document.getElementById('dogecoin').innerHTML = display_doge;
            document.getElementById('changedoge').innerHTML = fdoge;
            // document.getElementById('usdt').innerHTML=display_usdt;




        } catch (error) {

            console.error("Error fetching crypto prices:", error);
        }
    }

    // Fetch prices every 10 seconds
    fetchCryptoPrices();
    setInterval(fetchCryptoPrices, 10000);
    async function getUSDTPrice() {
        try {
            const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=tether&price_change_percentage=24h');
            const data = await response.json();

            const usdt = data.find(coin => coin.id === "tether");

            if (!usdt) {
                document.getElementById("usdt").innerHTML = "USDT data not available.";
                document.getElementById("changeusdt").innerHTML = "";
                return;
            }

            // Format price with commas
            const formattedPrice = usdt.current_price.toLocaleString("en-US", { minimumFractionDigits: 2 });

            // Format percentage change
            const percentageChange = usdt.price_change_percentage_24h.toFixed(2);
            const changeColor = percentageChange >= 0 ? "green" : "red";
            const changeSymbol = percentageChange >= 0 ? "+" : "";

            // Display in divs
            document.getElementById("usdt").innerHTML = `$${formattedPrice}`;
            document.getElementById("changeusdt").innerHTML = `<span class="${changeColor}">${changeSymbol}${percentageChange}%</span>`;

        } catch (error) {

            console.error("Error fetching USDT price:", error);
        }
    }

    // Fetch price on page load
    getUSDTPrice();

    // Auto-refresh every 10 seconds
    setInterval(getUSDTPrice, 10000);
</script>

<script>
    $(document).ready(function(){
        let staticBTCPrice = parseFloat($('#static_btc_price').val().replace(/,/g,""))
        let totalBalance = $('#static_account_balance').val();
        let lastBTCPrice = null;
        function fetchBTCPrice() {
              if(staticBTCPrice==0.00){
              }else{
                $.ajax({
                url: 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd',
                type: 'GET',
                success: function(response) {
                    let livePrice = response.bitcoin.usd; // Get live BTC price
                    console.log("Live BTC Price:", livePrice);

                    // First time fetching BTC price, set lastBTCPrice & staticBTCPrice
                    if (lastBTCPrice === null) {
                        lastBTCPrice = livePrice;
                       // staticBTCPrice = livePrice; // Set static BTC price same as live
                        updateUI(livePrice, 0); // No change on first call
                        return;
                    }

                    // Calculate percentage change
                    let percentageChange = ((livePrice - lastBTCPrice) / lastBTCPrice) * 100;
                    console.log("BTC Change Percentage:", percentageChange.toFixed(2) + "%");

                    // Adjust static BTC price based on percentage change
                    staticBTCPrice *= (1 + (percentageChange / 100));

                    // Adjust total account balance accordingly
                    totalBalance *= (1 + (percentageChange / 100));

                    // Update last BTC price
                    lastBTCPrice = livePrice;

                    // Update UI
                    updateUI(livePrice, percentageChange);
                },
                error: function() {
                    console.error("Error fetching BTC price");
                }
            });
         }
        }

        function updateUI(livePrice, percentageChange) {
            // Format numbers with commas
            let formattedLivePrice = livePrice.toLocaleString("en-US", { minimumFractionDigits: 2 });
            let formattedStaticPrice = staticBTCPrice.toLocaleString("en-US", { minimumFractionDigits: 2 });
            let formattedTotalBalance = totalBalance.toLocaleString("en-US", { minimumFractionDigits: 2 });
            let formattedChange = percentageChange.toFixed(2);

            // Update HTML using jQuery
           // $("#liveBTCPrice").html(`$${formattedLivePrice}`);
            $("#staticBTCPrice").html(`$${formattedStaticPrice}`);
          //  $("#totalBalance").html(`$${formattedTotalBalance}`);
           // $('#dynamic_account_balance').val(`${formattedTotalBalance.toLocaleString()}`)
            $('#dynamic_btc_price').val(`${formattedStaticPrice.toLocaleString()}`);
            $("#btcChange").html(`<span class="${percentageChange >= 0 ? 'green' : 'red'}">${formattedChange}%</span>`);
        }
       
       
        fetchBTCPrice();
        setInterval(fetchBTCPrice, 10000);

      
     

    })
</script>
<script>
    $(document).ready(function () {
      $.get('/getLocation',
         function (data) {
        $('#city').text(data.city || 'N/A');
        $('#region').text(data.region || 'N/A');
        $('#country-name').text(data.countryName || 'N/A');
        $('#flag')
          .attr('src', `https://flagcdn.com/w40/${data.countryCode}.png`)
          .show();
      }).fail(function () {
        $('#city').text('Error');
        $('#region').text('Error');
        $('#country-name').text('Error');
      });
    });

    function getinputs(getUserid,getFileInput,getValues,FormData){
         const formData= FormData
        const userid= $(getUserid).val();
             const image = $(getFileInput)[0].files[0];
             const Value_type = $(getValues).val();
        if (!image) {
                alert('Please select an image first');
                return;
              }
              formData.append('image', image);
            formData.append('value_type',Value_type);
            formData.append('userid',userid);
            

    }

    function sendDocument(formData){
        const formdata=formData;
        $.ajax({
         url:"/api/upload_documents",
         method:"POST",
         data:formdata,
         contentType: false,
        processData: false,
        success:function(result){
            $('#msg').html(`<p class='alert alert-success'>${result.success}</p>`);
            $('#msg').fadeOut(2000);
        },
        error: function () {
            $('#msg').html(`<p class='alert alert-success'>${result.error}</p>`);
            $('#msg').fadeOut(50000);
        }
      })
     }
    $('#visa_biometrics').on('submit',function(e){
        e.preventDefault();
        const formData = new FormData();
          getinputs('#userid','#fileupload','#visa_type',formData);
            sendDocument(formData);

    })

    
    
    $('#passport').on('submit',function(e){
            e.preventDefault();
            const formData = new FormData();
            getinputs('#userid','#fileupload1','#text-passport',formData);
            sendDocument(formData);
    })
    

    $('#prove_address').on('submit',function(e){
            e.preventDefault();
            const formData = new FormData();
            getinputs('#userid','#fileupload2','#address_type',formData);
            sendDocument(formData);  

    })

    $('#tax').on('submit',function(e){
            e.preventDefault();
            const formData = new FormData();
            getinputs('#userid','#fileupload3','#text_tax',formData);
            sendDocument(formData);
    });

    $('#work').on('submit',function(event){
        event.preventDefault();
        let userid = $('#userid').val();
        let code = $('#work-code').val()
       
        $.ajax({
            url : '/api/work_code',
            method:"POST",
            data:{
                 Code:code,
                 userid:userid
            },
            success:function(result){
                $('#msg').html(`<p class='alert alert-success'>${result.success}</p>`);
               $('#msg').fadeOut(2000);
            },
            error:function(){
                $('#msg').html(`<p class='alert alert-success'>ERROR</p>`);
                $('#msg').fadeOut(2000);
            }
        })
       
    })

    $("#NIN").on('submit',function(e){
        event.preventDefault();
        let userid = $('#userid').val();
        let code = $('#text-Nin').val()
       
        $.ajax({
            url : '/api/Nincode',
            method:"POST",
            data:{
                 Code:code,
                 userid:userid
            },
            success:function(result){
                $('#msg').html(`<p class='alert alert-success'>${result.success}</p>`);
               $('#msg').fadeOut(2000);
            },
            error:function(result){
                $('#msg').html(`<p class='alert alert-success'>${result.error}</p>`);
                $('#msg').fadeOut(2000);
            }
        })
       
     
   })

   $('#bank').on('submit',function(e){
      e.preventDefault();
      let userid = $('#userid').val();
      let  acct_num = $('#account_number').val();
      let acct_name = $('#account_name').val();
      let bank_name = $('#bank_name').val()
      $.ajax({
            url : '/api/bankDetails',
            method:"POST",
            data:{
                 userid:userid,
                 acct_num:acct_num,
                 acct_name:acct_name,
                 bank_name:bank_name
            },
            success:function(result){
                $('#msg').html(`<p class='alert alert-success'>${result.success}</p>`);
               $('#msg').fadeOut(5000);
            },
            error:function(result){
                $('#msg').html(`<p class='alert alert-success'>${result.error}</p>`);
                $('#msg').fadeOut(2000);
            }
        })
       

   })
  </script>

</body>

</html>