<div class="container ">
								
    <!-- Search and Filter Section -->
    <div class="d-flex justify-content-between mb-3">
        <input type="text" class="form-control w-50" id="searchInput" placeholder="Search transactions...">
        <select class="form-select w-25" id="statusFilter">
            <option value="">All Status</option>
            <option value="Success">Success</option>
            <option value="Pending">Pending</option>
            <option value="Failed">Failed</option>
        </select>
    </div>

    <!-- Transactions Table -->
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-dark text-white table_hover">
                <tr>
                    
                    
                    <th>Amount</th>
                    <th>Reciept</th>
                    <th>Deposit Method</th>
                    <th>Crypto Coin</th>
                    <th>Crypto Amount</th>
                    <th>Date</th>
                    <th>Status</th>

                </tr>
            </thead>
            <tbody id="transactionTable">
                <% transaction_history.forEach(function(transaction, index){ %>
                    <tr>
                        
                        <td  class="rttd">$<%= transaction.amount.toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') %></td>
                        <td class="rttd"><%= transaction.receipt %></td>
                        <td class="rttd"><%= transaction.deposit_type %></td>
                        <td class="rttd"><% if (transaction.crypto_coin=="No Crypto") { %>
                              <p> <%=transaction.crypto_coin %></p>
                        <% }else if(transaction.crypto_coin=="BTC"){ %>
                             <i class="fa-brands fa-bitcoin text-warning"><span style="color:#333"><%= " "+transaction.crypto_coin.toLowerCase() %></span></i>
                      <% } else if(transaction.crypto_coin=="ETH"){ %>
                            <i class="fa-brands fa-bitcoin text-warning"><%= transaction.crypto_coin %></i>
                      <% }else if(transaction.crypto_coin=="USDT"){ %>
                        <i class="fa-brands fa-bitcoin text-warning"><%= transaction.crypto_coin %></i>
                      <% }else if(transaction.crypto_coin=="DOGE"){%>
                        <i class="fa-brands fa-bitcoin text-warning"><%= transaction.crypto_coin %></i>	
                        <% }  %>
                    </td>
                        <td  class="rttd"><%= transaction.crypto_amount %></td>
                        <td  class="rttd"><%= transaction.date %></td>
                        <td  class="rttd">
                             <% if (transaction.status=="pending") { %>

                                   <span class="badge btn btn-outline-warning text-warning status_success"><%= transaction.status %></span>
                                    <span class="badge btn btn-outline-secondary text-warning status_hover view_trans "  data-bs-toggle="modal" data-bs-target="#view_transaction" data-index="<%= index %>" ><i class="fa-solid fa-eye" ></i></span>
                                    <input type="hidden" name="trnxID" class="trnxID_pending" value="<%= transaction.transactionId %>">

                             <% } else if(transaction.status=="success"){ %>
                                <span class="badge btn btn-outline-success text-success status_hover" ><%= transaction.status %></span>
                                <span class="badge btn btn-outline-secondary text-success status_hover view_trans"  data-bs-toggle="modal" data-bs-target="#view_transaction" data-index="<%= index %>"><i class="fa-solid fa-eye"></i></span>
                                <input type="hidden" name="trnxID" class="trnxID_pending" value="<%= transaction.transactionId %>">

                             <% } %>			
                        </td>
                    </tr>
                       
                <% }) %>
        </table>
    </div>
</div>

<script>
     $('#btc_form').on('submit',function(e){
        e.preventDefault();
        let amount = $('#btc_amount').val();
        let btc_amount = $('#amount_in_btc').val();
        let deposit_type = $('#deposit_type').val();
        let deposit_crypto_coin = $('#deposit_coin').val();
        userid =$('#userid').val();
        //alert(amount+""+btc_amount+""+deposit_type+""+deposit_crypto_coin)
        $.post('http://localhost:5000/api/deposit_crypto',
            {
            Amount:amount,
            crypto_Amount:btc_amount,
            Deposit_type:deposit_type,
            Deposit_Crypto_Coin:deposit_crypto_coin,
            Userid:userid
        },
        function(response){
               if(response.status==200){
                
                  $('#successModal').modal('show');
                  $('#BtcModal').modal('hide');
               }
        })
    })



    if(getdetails.deposit_type=="Deposit"){
        
        const get_data_in_account= await account_model.find({userid:userid});
        const deposite_balance = parseFloat(get_data_in_account.Deposite_Balance)
        const final_balance = Amount+deposite_balance;
         const updateDeposite_Balance = await account_model.updateOne({userid:userid},{Deposit_Balance:final_balance})
         if(updateDeposite_Balance){
             await transaction_history_model.updateOne({userid:userid,transactionId:get_trnx_id},{status:status})
             res.json({success:"Balance has been updated ",status:200})
         }

    }

    changestatus()
                   if(changestatus){
                        await account_model.updateOne({userid:userid},{Btc_Amount:new_btc,Deposit_Balance:new_balance})
                       return  res.json({success:"success", status:200});
                   }else{
                       return  res.json({error:"payment could not be approved"});
                   }

                   changestatus()
                  if(changestatus){
                       await account_model.updateOne({userid:userid},{Btc_Amount:new_btc,Deposit_Balance:new_balance})
                      return  res.json({success:"success", status:200});
                  }else{
                      return  res.json({error:"payment could not be approved"});
                  }




                  changestatus()
                  if(changestatus){
                       await account_model.updateOne({userid:userid},{Ethereum_Amount:new_eth.toLocaleString('en-Us',{minimumFractionDigits:2}),Deposit_Balance:final_balance.toLocaleString('en-Us',{minimumFractionDigits:2})})
                      return  res.json({success:"success", status:200});
                  }else{
                      return  res.json({error:"payment could not be approved"});
                  }


                  const check= sendmail(process.env.EMAIL,email,subject,quick_text);
                    if(check){
                        //const create_account_balance =await account_model.create(us)
                        res.status(200).json({message:"email has been sent "+email,status:200})
                       
                    }else{
                      res.status(400).json({error:"could not send email"});
                    }



                    $.post('http://localhost:5000/api/admin_login',
            {
                  Username:username,
                  Password:password 
          },
          function(data){
                if(data.status==200){
                    $('#msg').html(`<p class='alert alert-success' style'text-align:center'>${data.message}</p>`);
                }else{
                    $('#msg').html(`<p class='alert alert-danger' style'text-align:center'>${data.error}</p>`);
                }
          });




          $.ajax({
                 url:`http://localhost:5000/user-details/${id}`,
                 method: 'GET',
                 success:function(data){
                   
                 }
            })



            $.post('http://localhost:5000//api/update_user_info',
        {
             Userid:userid,
             phoneNumber:phoneNumber,
             Country:country,
             State:state,
             DOB:dob,
             Address:address
       },
    function(data){
      if(data.status==200){
          $('#update_msg').html("<p class='alert alert-success'>Profile has been Updated</p>")
          $('#profile_btn').prop('disabled', true);
      }else{
        $('#update_msg').html("<p class='alert alert-danger'>An Error Just Occured</p>")
      }
    })




    function get_code_value(userid,code,url){
        let userid = $(userid).val();
        let code = $(code).val()
        let Url = url
        $.ajax({
            url : Url,
            method:"POST",
            data:{
                 Code:code,
                 userid:userid
            },
            success:function(result){
                $('#msg').html(`<p class='alert alert-success'>${result.success}</p>`);
               $('#msg').fadeOut(2000);
            },
            error:function(){
                $('#msg').html(`<p class='alert alert-success'>ERROR</p>`);
                $('#msg').fadeOut(2000);
            }
        })
    }

    $('#work').on('submit',function(event){
        event.preventDefault();
        alert("worked");
        get_code_value('#userid','#work-code','/api/work_code'); 
    })
   $("#NIN").on('submit',function(e){
       e.preventDefault();
       get_code_value('#userid','#text-Nin','/api/nin_code'); 
   })
</script>


<script>

    exports.post_signup = async(req, res) =>{
     const subject = "Verify Email";
     quick_text = " Hello "+req.body.Name+"\n Welcome to MineStream Investment, \n find your one time code bellow \n  "+verify_code+" \n expires in five Minutes"
   if(req.body.Password == req.body.con_password){

        const name = req.body.Name;
        const email = req.body.Email;
        const password = req.body.Password
      
      //check if user already exists before registring 
      const existingUser = await Users.findOne({email});
      if(existingUser){
          res.json({error:existingUser.email+" already exists",status:403});
      }else{
                 // hash password
              const salt = await bcrypt.genSalt(15);
            const hashedpassword = await bcrypt.hash(password,salt);
     
     //create new user
     const newUsers =({name,email,password:hashedpassword});
      await Users.create(newUsers)
            .then(async()=>{

                const sendcode = await verify_model.create({code:verify_code,email:email});
                if(sendcode){

                    const check= sendmail(process.env.EMAIL,email,subject,quick_text);
                    if(check){
                        //const create_account_balance =await account_model.create(us)
                        res.status(200).json({message:"email has been sent "+email,status:200})
                       
                    }else{
                      res.status(400).json({error:"could not send email"});
                    }

                }else{
                    res.status(400).json({error:"could not send code to database "})     
                }

            })
            .catch(error=>{
                res.json({error:error.message,staus:403})
            })
      }
     
      //

   }else{
       return  res.status(500).json({message:"password does not match"})
     
   }
 
     
 }



 $.post('/api/update_user_info',
        {
             Userid:userid,
             phoneNumber:phoneNumber,
             Country:country,
             State:state,
             DOB:dob,
             Address:address
       },
    function(data){
      if(data.status==200){
          $('#update_msg').html("<p class='alert alert-success'>Profile has been Updated</p>")
          $('#profile_btn').prop('disabled', true);
      }else{
        $('#update_msg').html("<p class='alert alert-danger'>An Error Just Occured</p>")
      }
    })


    
$(document).ready(function(){
  /*  if($('#phone_number').val()!="" && $('#country').val()!="" ){
        $('#profile_btn').prop('disabled', true);
    }else{
        $('#profile_btn').prop('disabled', false);
    }*/
$('#update_user_info').on('submit',function(e){
    e.preventDefault();
     let userid = $('#userid').val();
     let phoneNumber = $('#phone_number').val();
     let country = $('#country').val();
     let state = $('#state').val();
     let  date = $('#date').val();
     let month = $('#month').val();
     let year = $('#year').val();
     let dob = date+"/"+month+"/"+year;
     let address= $('#address').val();
     $.ajax({
                url:"/api/update_user_info",
                type:"post",
                contentType:"application/json",
                data:JSON.stringify({
                       Userid:userid,
                        phoneNumber,
                       Country:country,
                       State:state,
                         DOB:dob,
                        Address:address
                }),
                success:function(data){
                        if(data.status==200){
                        $('#update_msg').html("<p class='alert alert-success'>Profile has been Updated</p>")
                        $('#profile_btn').prop('disabled', true);
                    }else{
                      $('#update_msg').html("<p class='alert alert-danger'>An Error Just Occured</p>")
                    }
                },
                  error: function(xhr) {
                      $('#update_msg').html("<p class='alert alert-danger' style'text-align:center'>Code based Error</p>");
                console.error('Login failed:', xhr.status, xhr.responseText);
        }
     })
})



})
</script>


<table  class="table table-hover table-striped table-bordered" style="width:100%">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>Amount</th>
                                                <th>Dep Type</th>
                                                <th>Crypto Amount</th>
                                                <th>Date</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            
                                         <% transac_history.forEach( function (trans) { %>

                                            <tr>
                                                <td id="transactionID" data-id="<%= trans.transactionId %>"><%= trans.transactionId %></td>
                                                <td id="Amount" data-amount="<%= trans.amount %>"><%= trans.amount %></td>
                                                 <td ><%= trans.deposit_type %></td>
                                                <td id="crypto_Amount" data-crypto_amount="<%= trans.crypto_Amount %>" data-crypto_coin="<%= trans.crypto_coin %>" ><%=  trans.crypto_amount+" "+`(${trans.crypto_coin})` %></td>
                                                <td><%= trans.date %></td>
                                                <td> <% if (trans.status=="pending") { %>
                                                      <button type="button" class="btn btn-outline-warning btn_approve " >Approve</button>
                                                <% }else{%>
                                                         <span class="text-success"><%= trans.status %></span>
                                               <% } %></td>
                                                
                                            </tr>
                                          
                                         <% }) %>
                                        </tbody>
                                    </table>





     let  changestatus =    async function changeStatus(){
        await transaction_history_model.updateOne({userid:userid,transactionId:get_trnx_id},{status:status})
    }
    const SendMail = async function(){
        const getemail = await Users.findOne({_id:userid},{email:1})
        const text = `$${getdetails[0].amount.toLocaleString('en-Us',{minimumFractionDigits:2})} Worth of ${crypto_type} has been deposited to your Wallet\n\n Thanks For Your Smart Investment Choice`
        const subject=`${crypto_type} CREDIT`
        sendmail(process.env.EMAIL,getemail,subject,text);
    }
   try{
         getdetails =  await transaction_history_model.find({userid:userid,transactionId:get_trnx_id});
        const get_data_in_account= await account_model.find({userid:userid});
          Amount = parseFloat(getdetails[0].amount.replace(/,/g,""))
        crypto_amount = parseFloat(getdetails[0].crypto_amount);
         crypto_type = getdetails[0].crypto_coin;
        const deposit_type = getdetails[0].deposit_type

          status = "success"  
         // varaibles fo data in account
         deposite_balance = parseFloat(get_data_in_account[0].Deposit_Balance.replace(/,/g,""))
         Btc_Amount = parseFloat(get_data_in_account[0].Btc_Amount.replace(/,/g,""))
         Ethereum_Amount = parseFloat(get_data_in_account[0].Ethereum_Amount.replace(/,/g,""));
         Usdt_Amount = parseFloat(get_data_in_account[0].Usdt_Amount.replace(/,/g,""));
         Doge_Amount = parseFloat(get_data_in_account[0].Doge_Amount.replace(/,/g,""));
        // const crypto_balance = parseFloat(get_data_in_account.crypto_amount)
         const final_balance = Amount+deposite_balance;
         if(deposit_type == "Deposit"){
            changestatus()
            if(changestatus){
                await account_model.updateOne({userid:userid},{Deposit_Balance:final_balance.toLocaleString('en-Us',{minimumFractionDigits:2})})
                const getemail = await Users.findOne({_id:userid},{email:1})
                const text = `$${getdetails[0].amount.toLocaleString('en-us',{minimumFractionDigits:2})} has been deposited to your Wallet\n\n Thanks For Your Smart Investment Choice`
                 const subject= "CREDIT"
                sendmail(process.env.EMAIL,getemail,subject,text);
                return res.json({success:"transaction status updated ",status:200})
            }

         }else if(deposit_type=="Crypto"){
            switch (crypto_type){
                case "BTC":
                    const new_btc = Btc_Amount+Amount
                    const new_balance= deposite_balance+Amount;
                     changestatus()
                  if(changestatus){
                       await account_model.updateOne({userid:userid},{Btc_Amount:new_btc.toLocaleString('en-Us',{minimumFractionDigits:2}),Deposit_Balance:new_balance.toLocaleString('en-Us',{minimumFractionDigits:2})})
                       SendMail();
                      return  res.json({success:"success", status:200});
                  }else{
                      return  res.json({error:"payment could not be approved"});
                  }
                 
                 
                case "ETH":
                    const new_eth = Ethereum_Amount+Amount
                    const getnew_balance= deposite_balance+Amount;
                    changestatus()
                    if(changestatus){
                         await account_model.updateOne({userid:userid},{Ethereum_Amount:new_eth.toLocaleString('en-Us',{minimumFractionDigits:2}),Deposit_Balance:getnew_balance.toLocaleString('en-Us',{minimumFractionDigits:2})})
                         SendMail();
                         return  res.json({success:"success", status:200});
                    }else{
                        return  res.json({error:"payment could not be approved"});
                    }
                   // return res.json({Ethereum_amount:Ethereum_Amount,Amount:Amount,Deposit_Balance:deposite_balance,final_balance:getnew_balance})

                case "DOGE":
                    const new_doge = Doge_Amount+Amount
                    const getdoge_balance= deposite_balance+Amount;
                    changestatus()
                    if(changestatus){
                         await account_model.updateOne({userid:userid},{Doge_Amount:new_doge.toLocaleString('en-Us',{minimumFractionDigits:2}),Deposit_Balance:getdoge_balance.toLocaleString('en-Us',{minimumFractionDigits:2})})
                         SendMail();
                         return  res.json({success:"success", status:200});
                    }else{
                        return  res.json({error:"payment could not be approved"});
                    }
                    
                case "USDT":
                    const new_usdt = Usdt_Amount+Amount
                    const usdt_balance= deposite_balance+Amount;
                    changestatus()
                    if(changestatus){
                         await account_model.updateOne({userid:userid},{Usdt_Amount:new_usdt.toLocaleString('en-Us',{minimumFractionDigits:2}),Deposit_Balance:usdt_balance.toLocaleString('en-Us',{minimumFractionDigits:2})})
                         SendMail();
                         return  res.json({success:"success", status:200});
                    }else{
                        return  res.json({error:"payment could not be approved"});
                    }
                default:
                   return res.json({error:`none of the options are met for type ${crypto_type}`});
            }
           
                 
         }else{
            return  res.json({error:"None of the Options are met"})
         }

   //  res.json({data_in_history:getdetails, data_in_account:get_data_in_account[0], final_balance:final_balance});
   

   }catch(err){
      return res.json({error:err.message});
   }